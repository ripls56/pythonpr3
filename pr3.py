import pyodbc
import click
import os
from random import randint
from decimal import Decimal
import smtplib

connection = pyodbc.connect('Driver={SQL Server}; Server=.\SQLEXPRESS; Database=pythondb; Trusted_Connection=yes;')
cursor = connection.cursor()
user = None
smtpServer = "smtp.mail.ru"
port = 587
emailSender = "ripls56@mail.ru"
password = "zm6khN9074gGecQAX2iM"

def mail(receiverEmail):
    try:
        code = ""
        for i in range(6):
            code += str(randint(1, 9))
        # print(code)
        smpt = smtplib.SMTP(smtpServer, port)
        smpt.starttls()
        smpt.login(emailSender, password)
        smpt.sendmail(emailSender, receiverEmail, code)
    except Exception as e:
        print(e)
    finally:
        smpt.quit() 
        codeConfirm = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –ø–æ—á—Ç—ã: ")
        if(code != codeConfirm):
            print("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            mail(receiverEmail)

class DataBase:
    
    def insertIngredient():
        try:
            os.system('cls')
            name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞: ")
            price = input("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞: ")
            buyprice = input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞: ")
            insertQuery = f"INSERT INTO Ingredients (Ingredient_Name, Ingredient_Price, Ingredient_BuyPrice) VALUES ('{name}', {price}, {buyprice})"
            cursor.execute(insertQuery)
            connection.commit()
            click.pause(f"–ò–≥—Ä–µ–¥–∏–µ–Ω—Ç '{name}' –¥–æ–±–∞–≤–ª–µ–Ω")
        except Exception as e:
            print(e)
    
    def updateIngredient(ingredients):
        try:
            os.system('cls')
            if(input("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ? (–î–∞ / –ù–µ—Ç) ")=="–î–∞"):
                ingredients[1] = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ")
            if(input("–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É?")=="–î–∞"):
                ingredients[2] = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É: ")
            updateQuery = f"UPDATE [dbo].[Ingredients] SET [Ingredient_Name] = '{ingredients[1]}', [Ingredient_Price] = {ingredients[2]} WHERE [ID_Ingredients] = {ingredients[0]}"
            cursor.execute(updateQuery)
            connection.commit()
            click.pause(f"–ò–≥—Ä–µ–¥–∏–µ–Ω—Ç '{ingredients[1]}' –∏–∑–º–µ–Ω–µ–Ω")
        except Exception as e:
            print(e)

    def deleteIngredient(ingredients):
        try:
            os.system('cls')
            if(input("–í—ã —É–≤–µ—Ä–µ–Ω—ã? (–î–∞ / –ù–µ—Ç) ")=="–î–∞"):
                deleteQuery = f"DELETE FROM [dbo].[Ingredients] WHERE [ID_Ingredients] = {ingredients[0]}"
                cursor.execute(deleteQuery)
                connection.commit()
                click.pause(f"–ò–≥—Ä–µ–¥–∏–µ–Ω—Ç '{ingredients[1]}' —É–¥–∞–ª–µ–Ω")
            else:
                click.pause(f"–ò–≥—Ä–µ–¥–∏–µ–Ω—Ç '{ingredients[1]}' –Ω–µ —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            print(e)
    
    def buyIngredient(ingredients):
        try:
            os.system('cls')
            balance = user[4]
            print(f"–ó–∞–∫—É–ø–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤. –ë–∞–ª–∞–Ω—Å: {balance}")
            count = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: "))
            price = ingredients[2] * count
            if balance < price:
                click.pause(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ {price}.\n")
                return
            user[1] -= price
            insertQuery = f"UPDATE [dbo].[Ingredients] SET [ActualCount] = {ingredients[3]}+{count} WHERE [Ingredient_Name] = '{ingredients[1]}'"
            cursor.execute(insertQuery)
            insertQuery = f"UPDATE [dbo].[Users] SET [User_Balance] = {balance}-{price} WHERE [User_Login] = '{user[1]}'"
            cursor.execute(insertQuery)
            connection.commit()
            click.pause(f"""
                            –ò–≥—Ä–µ–¥–∏–µ–Ω—Ç {ingredients[1]} –∑–∞–∫—É–ø–ª–µ–Ω –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {count}—à—Ç.
                            –¢–µ–ø–µ—Ä—å –Ω–∞ —Å–∫–ª–∞–¥–µ {ingredients[3]+count}—à—Ç.
                        """)
        except Exception as e:
            print(e)
    
    def getAllIngredients():
        try:
            select_query = "SELECT * FROM Ingredients"
            cursor.execute(select_query)
            ingredients = cursor.fetchall()
            for i in ingredients:
                print(f"{i[0]} - {i[1]} - {i[2]} - {i[3]}")
            ingredientID = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞: ")
            ingredient = ingredients[int(ingredientID)-1]
            if ingredient is None:
                click.pause("–¢–∞–∫–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –Ω–µ—Ç")
                DataBase.getAllIngredients()
            else: 
                return ingredient
        except Exception as e:
            print(e)

    def buyProduct():
        print(f"""
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user[1]}
            –í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {user[4]} $.
            –î–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ü–∏—è –∑–∞ 2 –∏–ª–∏ –±–æ–ª–µ–µ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –º–µ–≥–∞ —Ä–æ–ª–ª–∞ üòé  –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –µ—â–µ –æ–¥–∏–Ω –í –ü–û–î–ê–†–û–ö!
            """)
        ingrs = cursor.execute("SELECT * FROM Ingredients").fetchall()
        basePrice = 50
        orderCount = int(input(f"–°–∫–æ–ª—å–∫–æ –º–µ–≥–∞ —Ä–æ–ª–ª–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?({basePrice}/—à—Ç) : "))
        if orderCount >= 2:
            orderCount + 1
        orderPrice = basePrice * orderCount
        rolls = []
        for i in range(orderCount):
            print(f"–°–æ–±–µ—Ä–∏ —Å–≤–æ–π –º–µ–≥–∞ —Ä–æ–ª–ª „Éæ(‚âß‚ñΩ‚â¶*)o ‚Ññ{i+1}")
            ingredientList = {"ingredients":[], "count":[], "price":0}
            while input("–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ –∑–∞–∫–∞–∑? (–î–∞ / –ù–µ—Ç): ") == "–î–∞":
                num = 1
                for i in ingrs:
                    print(f"{num} - {i[1]}: {i[2]} $")
                    num+=1
                ingrID = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å: "))-1
                addcount = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å: "))
                if ingrs[ingrID-1][3] < addcount:
                    click.pause("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤!\n ")
                    return
                orderPrice += float(ingrs[ingrID][2]) * addcount
                ingredientList["price"] += float(ingrs[ingrID][2]) * addcount
                ingredientList["ingredients"].append(ingrs[ingrID][0])
                ingredientList["count"].append(addcount)
                print(f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ {ingrs[ingrID]} –≤ –∑–∞–∫–∞–∑ ‚Ññ{num}! ({addcount} —à—Ç)")
            rolls.append(ingredientList)
        sale = countSale()
        orderPrice -= orderPrice * (sale/100)
        print(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç - {orderPrice} (–°–∫–∏–¥–∫–∞: {sale}%)")
        if input("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑? (–î–∞ / –ù–µ—Ç): ") != "–î–∞":
            return
        if user[4] < orderPrice:
            click.pause("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ!")
            return
        cursor.execute(f"UPDATE Users SET User_Balance = {user[4]} - {orderPrice} WHERE ID_User = {user[0]}")
        for item in rolls:
            d = item["price"]
            cursor.execute(f"INSERT INTO Orders (UserID, Order_Price, Order_Count, Order_Sale) VALUES ({user[0]}, {orderPrice}, {d}, {sale})")
            count = len(item["ingredients"])
            if(count > 0):
                orderID = cursor.execute("SELECT MAX(ID_Order) FROM Orders").fetchone()[0]
                for j in range(count):
                    ingID = item["ingredients"][j]
                    ingCount = item["count"][j]
                    cursor.execute(f"insert into Ingredient_Orders (OrderID, IngredientID, Count) values ({orderID}, {ingID}, {ingCount})")
        connection.commit()
        user[4] -= Decimal(orderPrice)
    
    def userHistory(userID):
        try:
            cursor.execute(f"SELECT * FROM Orders WHERE [USERID] = {userID}")
            orders = cursor.fetchall()
            print("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:")
            if(len(orders)==0):
                print("–í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –∑–∞–∫–∞–∑, –Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ üôÇ")
            else:
                for i in orders:
                    print(f"–ó–∞–∫–∞–∑ ‚Ññ{i[0]} \"{i[1]}\" –Ω–∞ —Å—É–º–º—É {i[4]} [{i[3]}]")
                    cursor.execute(f"SELECT * FROM [Ingredient_Orders] inner join [dbo].[Ingredients] on IngredientID = ID_Ingredients WHERE [ORDERID] = {i[0]} order by ID_IngredientOrders")
                    ingredients = cursor.fetchall()
                    for j in ingredients:
                        print(f"–î–æ–ø. –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: {j[6]} - {j[3]}—à—Ç./{j[8]}—Ä.")
            click.pause()
        except Exception as e:
            print(e)

    
    def getUserByLogin(login):
        try:
            selectQuery = f"SELECT * FROM Users WHERE User_Login = '{login}'"
            cursor.execute(selectQuery)
            user = cursor.fetchone()
            return user
        except Exception as e:
            print(e)
    
def registration():
    try:
        os.system('cls')
        userLogin = input("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ")
        user = DataBase.getUserByLogin(userLogin)
        if user is not None:
            click.pause("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞")
            registration()
        password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
        password2 = input("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
        if (password != password2):
            click.pause("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞")
            registration()
        roleID = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å: (1 - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, 2 - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä): ")
        toEmail = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É: ")
        mail(toEmail)
        role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        match roleID:
            case "1":
                role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            case "2":
                role = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            case _:
                registration()
        insertQuery = f"INSERT INTO Users (User_Login, User_Password, User_Role, User_Mail) VALUES ('{userLogin}', '{password}', '{role}', '{toEmail}')"
        cursor.execute(insertQuery)
        connection.commit()
        click.pause("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–∫–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        login()
    except Exception as e:
        print(e)

def login():
    try:
        global user
        os.system('cls')
        userLogin = input("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ")
        password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
        user = DataBase.getUserByLogin(userLogin)
        if user is None:
            click.pause("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞")
            login()
        else:
            if user[2] != password:
                click.pause("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞")
                login()
        mail(user[7])
    except Exception as e:
        print(e)


def userInterface():
    os.system('cls')
    match(input("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:  (1 - –°–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑, 2 - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤: ")):
        case "1":
            DataBase.buyProduct()
            return
        case "2":
            DataBase.userHistory(user[0])
            return
        case _:
            userInterface()

def countSale():
    sale = 0
    if(randint(1, 6)==5):
        print("–¢–∞—Ä–∞–∫–∞–Ω?! –î–∞ –≤—ã —Å–∞–º–∏ –ø–æ–¥–∫–∏–Ω—É–ª–∏ –Ω–µ –≤–µ—Ä–∏–º, –Ω–æ –Ω–∞ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –¥–µ—Ä–∂–∏—Ç–µ —Å–∫–∏–¥–∫—É –≤ 30% ü´•")
        sale += 30
    match(user[5]):
        case "–ë—Ä–æ–Ω–∑–æ–≤–∞—è":
            sale += 5
        case "–°–µ—Ä–µ–±—Ä—è–Ω–∞—è":
            sale += 10
        case "–ó–æ–ª–æ—Ç–∞—è":
            sale += 20
    return sale

def adminInterface():
    match(input("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é!  (1 - –í—ã–±–æ—Ä –∏–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞, 2 - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞, 3 - –ò—Å—Ç–æ—Ä–∏—è): ")):
        case "1":
            select = DataBase.getAllIngredients()
            match(input(f"–î–µ–π—Å—Ç–≤–∏–µ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º '{select[1]}'  (1 - –ó–∞–∫—É–ø–∫–∞, 2 - –ò–∑–º–µ–Ω–µ–Ω–∏–µ, 3 - –£–¥–∞–ª–µ–Ω–∏–µ): ")):
                case "1":
                    DataBase.buyIngredient(select)
                case "2":
                    DataBase.updateIngredient(select)
                case "3":
                    DataBase.deleteIngredient(select)
                case _:
                    click.pause()
        case "2":
            DataBase.insertIngredient()
        case "3":
            users = cursor.execute("SELECT * FROM Users")
            for i in users:
                print(f"{i[0]} - {i[1]}")
            id = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å—Ç–æ—Ä–∏—é –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:")
            os.system('cls')
            DataBase.userHistory(id)
            return
        case _:
            adminInterface()


if __name__ == "__main__":
    os.system('cls')
    print("–ö–∏—Ñ–∞—Å ÔºàÔø£Ô∏∂Ôø£Ôºâ‚Üó")
    action = input("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ  (1 - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, 2 - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è): ")
    try:
        match(action):
            case "1":
                login()
            case "2":
                registration()
            case _:
                exit()
        while 1:
            os.system('cls')
            print(f"""
                    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å: {user[1]}!
                    –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–¥ —Ä–æ–ª—å—é: {user[3]}
                    –ë–∞–ª–∞–Ω—Å: {user[4]} $
                  """)
            match(user[3]):
                case "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
                    adminInterface()
                case "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å":
                    userInterface()
        click.pause("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    except Exception as e:
        print(e)
